(ql:quickload :incudine)
(ql:quickload :cm)
(require 'incudine)
(require 'cm)

(in-package :cm)

;; --------- PATHS TO SET ------------- ;; 

;; path to megra package
(defparameter *megra-root* (concatenate 'string (sb-posix:getcwd) "/megra"))

;; sample root folder ... note trailing "/" !
(defparameter *sample-root* (concatenate 'string (sb-posix:getcwd) "/megra-samples/"))

;; sample type aka file extension - wav or flac !
;; (currently not possible to mix ...)
(defparameter *sample-type* "flac" )

;; the impulse response to use for the reverb (no file extension)
(defparameter *reverb-ir* "ir1" )


;; --------- END PATHS TO SET ------------- ;;


;; --------- INITIALIZATION --------------- ;;
(progn  
  ;; start incudine, wait a little
  (incudine:rt-start)
  (sleep 1)  
  ;; int midi io
  ;; (defvar *midiin* (midi-open-default :direction :input))
  ;;(defvar *midiout* (midi-open-default :direction :output))
  ;; port to supercollider
  (defvar *oscout* (osc:open :host "127.0.0.1"
			     :port 57110 ;; <-- change this if you have scsynth running on another port
			     :direction :output
			     :latency 0))
  ;; misc cm-stuff ...
  ;;(setf *out* (cm::new cm::incudine-stream))
  ;;(setf *rts-out* *out*)
  ;; log level
  (setf (incudine::logger-level) :error))
  ;; start recieving midi 
  ;;(incudine::recv-start *midiin*))

;;(incudine::set-sharp-square-bracket-syntax)
;;(incudine::add-sharp-square-bracket-syntax)

;; now everything should be ready to load the megra package ... 
(load (concatenate 'string *megra-root* "/megra-package.lisp"))

(in-package :megra)

;; init group one if scsynth started from command line
;; (scsynth need to be started manually still)
(init-sc-base-group)

;; load ir data for reverb (contains hardcoded stuff)
(prepare-ir)


